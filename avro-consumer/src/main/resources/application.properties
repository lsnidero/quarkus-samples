quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.kafka.devservices.enabled=false
quarkus.apicurio-registry.devservices.enabled=false

# Apicurio registry
# for Apicurio Registry serde
mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2
# for Confluent Schema Registry serde
mp.messaging.connector.smallrye-kafka.schema.registry.url=http://localhost:8081/apis/ccompat/v6
%ocp.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://example-apicurioregistry-kafkasql-service.lsnidero-test.svc.cluster.local:8080/apis/registry/v2
%ocp.mp.messaging.connector.smallrye-kafka.schema.registry.url=http://example-apicurioregistry-kafkasql-service.lsnidero-test.svc.cluster.local:8080/apis/ccompat/v6
mp.messaging.connector.smallrye-kafka.bootstrap.servers=localhost:9092
%ocp.mp.messaging.connector.smallrye-kafka.bootstrap.servers=my-cluster-kafka-brokers.lsnidero-test.svc.cluster.local:9092
mp.messaging.incoming.movies-from-kafka.connector=smallrye-kafka
mp.messaging.incoming.movies-from-kafka.topic=movies
mp.messaging.incoming.movies-from-kafka.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.movies-from-kafka.auto.offset.reset=earliest
mp.messaging.incoming.movies-from-kafka.enable.auto.commit=false
mp.messaging.incoming.movies-from-kafka.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider

# DLT
mp.messaging.incoming.movies-from-kafka.value-deserialization-failure-handler=failure-dead-letter
mp.messaging.outgoing.dead-letter.topic=dead-letter-topic
mp.messaging.outgoing.dead-letter.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Postgres DB
%ocp.quarkus.datasource.db-kind=postgresql
%ocp.quarkus.datasource.username=userCP4
%ocp.quarkus.datasource.password=KYF0slguOlQTDpSp
%ocp.quarkus.datasource.reactive.url=postgresql://postgresql.lsnidero-test.svc.cluster.local:5432/movies

# Mongo DB
# configure the MongoDB client for a replica set of two nodes
quarkus.mongodb.connection-string = mongodb://localhost:27017
%ocp.quarkus.mongodb.connection-string = mongodb://mongodb-headless.lsnidero-test.svc.cluster.local:27017
# mandatory if you don't specify the name of the database using @MongoEntity
quarkus.mongodb.database = movie

# Openshift
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.labels.app=avro-cons
quarkus.kubernetes.deployment-target=openshift
quarkus.openshift.route.expose=true